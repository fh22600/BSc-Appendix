import MDAnalysis as mda
from MDAnalysis.analysis import align
import numpy as np

runs = [1,2,3,4,5,6,7,8,9,10]

times = [50, 60, 70, 75, 80, 90, 100, 110, 120, 125, 130, 140, 150, 160, 170, 175, 180, 190, 200,210, 220, 225, 230, 240, 250, 260, 270, 275, 280, 290, 300,310, 320, 325, 330, 340, 350, 360, 375, 380, 390, 400, 410, 420, 425, 430, 440, 450, 460, 470, 475, 480, 490,500]

# Load the base reference C-alpha structure
base_ref = mda.Universe('ref.pdb')
base_ca = base_ref.select_atoms('name CA')

# Save the positions of base C-alpha atoms to a file
np.savetxt("base_ca.txt", base_ca.positions)

time_points = [300,500,1000]

for tp in time_points:
    vectors = []

    for run in runs:
        for time in times:
            try:
                ref = mda.Universe(f'Repeat_{run}/ns_{time}/equil/md{time}_{tp}.pdb') ##equilibrium
                other = mda.Universe(f'Repeat_{run}/ns_{time}/md{time}_{tp}.pdb') ##nonequilibrum

                align.alignto(other, ref, select='name CA')

                ca_ref = ref.select_atoms('name CA').positions
                ca_other = other.select_atoms('name CA').positions

                diff = ca_other - ca_ref
                vectors.append(diff)

            except Exception as e:
                print(f"Error processing {run}/{time}: {e}")
                continue

    avg_vectors = np.mean(np.array(vectors), axis=0)

    # Calculate stats
    avg_disp = np.linalg.norm(avg_vectors, axis=1)
    sd = np.std(vectors, axis=0)
    se = sd / np.sqrt(len(vectors))

    avg_x = avg_vectors[:, 0]
    avg_y = avg_vectors[:, 1]
    avg_z = avg_vectors[:, 2]

    # SE of magnitude
    se_mag = (1 / avg_disp) * np.sqrt((avg_x**2)*(se[:, 0]**2) + (avg_y**2)*(se[:, 1]**2) + (avg_z**2)*(se[:, 2]**2))
     
    #significant_mask = avg_disp > 2 * se_mag  
    #avg_vectors[~significant_mask] = 0

    # Write summary stats
    with open(f"test_vec_stats/test_vec_stats_{tp}.txt", 'w') as f:
        for i in range(len(avg_vectors)):
            f.write(f"{avg_vectors[i][0]}\t{avg_vectors[i][1]}\t{avg_vectors[i][2]}\t{avg_disp[i]}\t{se[i][0]}\t{se[i][1]}\t{se[i][2]}\t{se_mag[i]}\n")

    coords = base_ca.positions * 0.1
    new_coords = coords + avg_vectors

    gro_filename = f'gro_files/1A0_1SD_{tp}.gro'

    # Write new structure in GRO format
    with open(gro_filename, 'w') as gro_file:
        gro_file.write("Generated by MDAnalysis\n")
        gro_file.write(f"{len(base_ca)}\n")

        atom_count = 1  # Initialize atom counter

        for atom, new_coord in zip(base_ca, new_coords):
            res_id = atom.resid  # Keep original residue ID
            res_name = atom.resname  # Keep original residue name
            atom_name = atom.name
            new_x, new_y, new_z = new_coord

            line = f"{res_id:>5}{res_name:<5}{atom_name:>5}" + \
                   f"{atom_count:>5}{new_x:8.3f}{new_y:8.3f}{new_z:8.3f}\n"
            gro_file.write(line)
            atom_count += 1  # Increment atom counter

       # Write box dimensions at the bottom
        box_dimensions = [10.0, 10.0, 10.0]
        gro_file.write(f"{box_dimensions[0]:10.5f}{box_dimensions[1]:10.5f}{box_dimensions[2]:10.5f}\n")